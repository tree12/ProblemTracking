//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class LoginClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44367";
    }

    login(login: UserViewModel): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Login/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(login);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(null as any);
    }

    index(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Login";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIndex(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIndex(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processIndex(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class MachineClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44367";
    }

    getMachines(): Observable<MachineViewModel[]> {
        let url_ = this.baseUrl + "/api/Machine/getMachines";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMachines(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMachines(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MachineViewModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MachineViewModel[]>;
        }));
    }

    protected processGetMachines(response: HttpResponseBase): Observable<MachineViewModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MachineViewModel.fromJS(item, _mappings));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MachineViewModel[]>(null as any);
    }

    index(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Machine";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIndex(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIndex(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processIndex(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ProblemClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44367";
    }

    getAllProblems(): Observable<ProblemViewModel[]> {
        let url_ = this.baseUrl + "/api/Problem/getAllProblems";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllProblems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllProblems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProblemViewModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProblemViewModel[]>;
        }));
    }

    protected processGetAllProblems(response: HttpResponseBase): Observable<ProblemViewModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProblemViewModel.fromJS(item, _mappings));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProblemViewModel[]>(null as any);
    }

    getAllProblems2(userName: string | null | undefined): Observable<ProblemViewModel[]> {
        let url_ = this.baseUrl + "/api/Problem/getProblemsByUser?";
        if (userName !== undefined && userName !== null)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllProblems2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllProblems2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProblemViewModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProblemViewModel[]>;
        }));
    }

    protected processGetAllProblems2(response: HttpResponseBase): Observable<ProblemViewModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProblemViewModel.fromJS(item, _mappings));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProblemViewModel[]>(null as any);
    }

    addProblem(problem: ProblemViewModel): Observable<number> {
        let url_ = this.baseUrl + "/api/Problem/addProblem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(problem);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddProblem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddProblem(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processAddProblem(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(null as any);
    }

    addProblemInvestigate(problemInvestigate: ProblemInvestigateViewModel): Observable<string> {
        let url_ = this.baseUrl + "/api/Problem/addProblemInvestigate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(problemInvestigate);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddProblemInvestigate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddProblemInvestigate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processAddProblemInvestigate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    index(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Problem";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIndex(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIndex(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processIndex(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(null as any);
    }
}

export abstract class BaseViewModelOfString implements IBaseViewModelOfString {
    id?: string | undefined;

    constructor(data?: IBaseViewModelOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any, _mappings?: any): BaseViewModelOfString | null {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseViewModelOfString' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IBaseViewModelOfString {
    id?: string | undefined;
}

export class UserViewModel extends BaseViewModelOfString implements IUserViewModel {
    userName?: string | undefined;
    password?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    role?: string | undefined;

    constructor(data?: IUserViewModel) {
        super(data);
    }

    init(_data?: any, _mappings?: any) {
        super.init(_data);
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any, _mappings?: any): UserViewModel | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<UserViewModel>(data, _mappings, UserViewModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["role"] = this.role;
        super.toJSON(data);
        return data;
    }
}

export interface IUserViewModel extends IBaseViewModelOfString {
    userName?: string | undefined;
    password?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    role?: string | undefined;
}

export abstract class BaseViewModelOfInteger implements IBaseViewModelOfInteger {
    id!: number;

    constructor(data?: IBaseViewModelOfInteger) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any, _mappings?: any): BaseViewModelOfInteger | null {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseViewModelOfInteger' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IBaseViewModelOfInteger {
    id: number;
}

export class MachineViewModel extends BaseViewModelOfInteger implements IMachineViewModel {
    machineName?: string | undefined;
    machineDescription?: string | undefined;
    investigateSteps?: InvestigateStepViewModel[] | undefined;

    constructor(data?: IMachineViewModel) {
        super(data);
    }

    init(_data?: any, _mappings?: any) {
        super.init(_data);
        if (_data) {
            this.machineName = _data["machineName"];
            this.machineDescription = _data["machineDescription"];
            if (Array.isArray(_data["investigateSteps"])) {
                this.investigateSteps = [] as any;
                for (let item of _data["investigateSteps"])
                    this.investigateSteps!.push(InvestigateStepViewModel.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): MachineViewModel | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<MachineViewModel>(data, _mappings, MachineViewModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["machineName"] = this.machineName;
        data["machineDescription"] = this.machineDescription;
        if (Array.isArray(this.investigateSteps)) {
            data["investigateSteps"] = [];
            for (let item of this.investigateSteps)
                data["investigateSteps"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IMachineViewModel extends IBaseViewModelOfInteger {
    machineName?: string | undefined;
    machineDescription?: string | undefined;
    investigateSteps?: InvestigateStepViewModel[] | undefined;
}

export class InvestigateStepViewModel extends BaseViewModelOfInteger implements IInvestigateStepViewModel {
    stepName?: string | undefined;
    stepDetail?: string | undefined;
    order!: number;
    machineId!: number;
    machine?: MachineViewModel | undefined;

    constructor(data?: IInvestigateStepViewModel) {
        super(data);
    }

    init(_data?: any, _mappings?: any) {
        super.init(_data);
        if (_data) {
            this.stepName = _data["stepName"];
            this.stepDetail = _data["stepDetail"];
            this.order = _data["order"];
            this.machineId = _data["machineId"];
            this.machine = _data["machine"] ? MachineViewModel.fromJS(_data["machine"], _mappings) : <any>undefined;
        }
    }

    static fromJS(data: any, _mappings?: any): InvestigateStepViewModel | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<InvestigateStepViewModel>(data, _mappings, InvestigateStepViewModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stepName"] = this.stepName;
        data["stepDetail"] = this.stepDetail;
        data["order"] = this.order;
        data["machineId"] = this.machineId;
        data["machine"] = this.machine ? this.machine.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IInvestigateStepViewModel extends IBaseViewModelOfInteger {
    stepName?: string | undefined;
    stepDetail?: string | undefined;
    order: number;
    machineId: number;
    machine?: MachineViewModel | undefined;
}

export class ProblemViewModel extends BaseViewModelOfInteger implements IProblemViewModel {
    problemName?: string | undefined;
    description?: string | undefined;
    active!: boolean;
    user?: UserViewModel | undefined;
    machine?: MachineViewModel | undefined;
    solveStatus!: SolveEnum;
    suceesInvestigateName?: string | undefined;

    constructor(data?: IProblemViewModel) {
        super(data);
    }

    init(_data?: any, _mappings?: any) {
        super.init(_data);
        if (_data) {
            this.problemName = _data["problemName"];
            this.description = _data["description"];
            this.active = _data["active"];
            this.user = _data["user"] ? UserViewModel.fromJS(_data["user"], _mappings) : <any>undefined;
            this.machine = _data["machine"] ? MachineViewModel.fromJS(_data["machine"], _mappings) : <any>undefined;
            this.solveStatus = _data["solveStatus"];
            this.suceesInvestigateName = _data["suceesInvestigateName"];
        }
    }

    static fromJS(data: any, _mappings?: any): ProblemViewModel | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<ProblemViewModel>(data, _mappings, ProblemViewModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["problemName"] = this.problemName;
        data["description"] = this.description;
        data["active"] = this.active;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["machine"] = this.machine ? this.machine.toJSON() : <any>undefined;
        data["solveStatus"] = this.solveStatus;
        data["suceesInvestigateName"] = this.suceesInvestigateName;
        super.toJSON(data);
        return data;
    }
}

export interface IProblemViewModel extends IBaseViewModelOfInteger {
    problemName?: string | undefined;
    description?: string | undefined;
    active: boolean;
    user?: UserViewModel | undefined;
    machine?: MachineViewModel | undefined;
    solveStatus: SolveEnum;
    suceesInvestigateName?: string | undefined;
}

export enum SolveEnum {
    Pending = 0,
    Solved = 1,
    NotSolve = 2,
}

export class ProblemInvestigateViewModel extends BaseViewModelOfString implements IProblemInvestigateViewModel {
    problem?: ProblemViewModel | undefined;
    stepToSolved?: InvestigateStepViewModel | undefined;
    solveStatus!: SolveEnum;
    picture?: string | undefined;

    constructor(data?: IProblemInvestigateViewModel) {
        super(data);
    }

    init(_data?: any, _mappings?: any) {
        super.init(_data);
        if (_data) {
            this.problem = _data["problem"] ? ProblemViewModel.fromJS(_data["problem"], _mappings) : <any>undefined;
            this.stepToSolved = _data["stepToSolved"] ? InvestigateStepViewModel.fromJS(_data["stepToSolved"], _mappings) : <any>undefined;
            this.solveStatus = _data["solveStatus"];
            this.picture = _data["picture"];
        }
    }

    static fromJS(data: any, _mappings?: any): ProblemInvestigateViewModel | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<ProblemInvestigateViewModel>(data, _mappings, ProblemInvestigateViewModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["problem"] = this.problem ? this.problem.toJSON() : <any>undefined;
        data["stepToSolved"] = this.stepToSolved ? this.stepToSolved.toJSON() : <any>undefined;
        data["solveStatus"] = this.solveStatus;
        data["picture"] = this.picture;
        super.toJSON(data);
        return data;
    }
}

export interface IProblemInvestigateViewModel extends IBaseViewModelOfString {
    problem?: ProblemViewModel | undefined;
    stepToSolved?: InvestigateStepViewModel | undefined;
    solveStatus: SolveEnum;
    picture?: string | undefined;
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T | null {
  if (!mappings)
    mappings = [];
  if (!data)
    return null;

  const mappingIndexName = "__mappingIndex";
  if (data[mappingIndexName])
    return <T>mappings[data[mappingIndexName]].target;

  data[mappingIndexName] = mappings.length;

  let result: any = new type();
  mappings.push({ source: data, target: result });
  result.init(data, mappings);
  return result;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}